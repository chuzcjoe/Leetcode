class Solution(object):
    def lengthOfLIS(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        
        # O(n^2) time complexity
        """
        n = len(nums)
        dp = [1] * n
        
        if not nums:
            return 0
        
        
        for i in range(1,n):
                MAX = 0
                for j in range(0,i):
                    if nums[j] < nums[i]:
                        if MAX < dp[j]:
                            MAX = dp[j]
                            
                    if nums[j] < nums[i] and dp[j] == MAX:
                        dp[i] = dp[j] + 1
                        
                    
        print(dp)
        return max(dp)
        """
        
        """
        DP
        
        dp = [1] * len(nums)
        cnt = 1
        
        if not nums:
            return 0
        
        for i in range(1,len(nums)):
            dp[i] = max([dp[j]+ 1 for j in range(i) if nums[i] > nums[j]]+[1])
            cnt = max(cnt,dp[i])
            
        return cnt
        """
        
        #O(nlogn) solution with binary search
        n = len(nums)
        if not nums:
            return 0
        
        def binarySearch(array,val):
            lo, hi = 0, len(array)-1
            while(lo <= hi):
                mid = (lo+hi) // 2
                if array[mid] > val:
                    hi = hi - 1
                elif array[mid] < val:
                    lo = lo + 1
                else:
                    return mid
            return lo
        
        results = []
        
        for val in nums:
            pos = binarySearch(results,val)
            
            if pos == len(results):
                results.append(val)
            else:
                results[pos] = val
                
        return len(results)
            
        
        
        
       
